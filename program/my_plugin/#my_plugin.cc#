#include <boost/bind.hpp>
#include <gazebo.hh>
#include <ncurses.h>
#include <physics/physics.hh>
#include <common/common.hh>
#include <sensors/sensors.hh>
#include <sensors/CameraSensor.hh>
#include <stdio.h>
#include <iostream>
#include <sys/types.h> /* definicja typu pid_t */
#include <sys/wait.h>  /* wait() */
#include <unistd.h>    /* getpid(); */
#include <signal.h>    /* kill(); */
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>             /* for strerror(int errno) */
#include <errno.h>
#include <thread>
#include <mutex>
#include <math.h>

#include "PID.hh"

#define PI 3.14159

using namespace std;
unsigned char* BuforDanych;   
namespace gazebo
{
  char ZMIENNA_GLOBALNA;
  class MobileBasePlugin : public ModelPlugin
  {
  public: void Load(physics::ModelPtr _parent, sdf::ElementPtr _sdf) 
    {

      // Store the pointer to the model
      this->model = _parent;

      // Load parameters for this plugin
      if (this->LoadParams(_sdf))
	{
	  // Listen to the update event. This event is broadcast every
	  // simulation iteration.
	  this->updateConnection = event::Events::ConnectWorldUpdateStart(
									  boost::bind(&MobileBasePlugin::OnUpdate, this));
	}
    }

  public: bool LoadParams(sdf::ElementPtr _sdf) 
    {

      // Find controller gain
      // if (!_sdf->HasElement("gain"))
      // 	{
      // 	  gzerr << "param [gain] not found\n";
      // 	  return false;
      // 	}
      // else
      // 	{
      // 	  // Get sensor name
      // 	  this->gain =
      // 	    _sdf->GetElement("gain")->GetValueDouble();
      // 	}
      WatekZjebany watekz
      // Find sensor name from plugin param
      if (!_sdf->HasElement("camera_sensor"))
	{
	  gzerr << "param [camera] not found\n";
	  return false;
	}
      else
	{
	  // Get sensor name
	  std::string sensorName =
	    _sdf->GetElement("camera_sensor")->GetValueString();

	  // Get pointer to sensor using the SensorMangaer
	  sensors::SensorPtr sensor =
	    sensors::SensorManager::Instance()->GetSensor(sensorName);

	  if (!sensor)
	    {
	      gzerr << "sensor by name ["
		    << sensorName
		    << "] not found in model\n";
	      return false;
	    }

	  this->camera = boost::shared_dynamic_cast<sensors::CameraSensor>
	    (sensor);
	  if (!this->camera)
	    {
	      gzerr << "camera by name ["
		    << sensorName
		    << "] not found in model\n";
	      return false;
	    }
	}

      // Load joints from plugin param
      if (!this->FindJointByParam(_sdf, this->leftWheelJoint,
      				  "left_wheel_hinge") ||
          !this->FindJointByParam(_sdf, this->rightWheelJoint,
      				  "right_wheel_hinge"))
        return false;

      // success
      return true;
    }

  public: bool FindJointByParam(sdf::ElementPtr _sdf,
				physics::JointPtr &_joint,
				std::string _param)
    {
      if (!_sdf->HasElement(_param))
	{
	  gzerr << "param [" << _param << "] not found\n";
	  return false;
	}
      else
	{
	  _joint = this->model->GetJoint(
					 _sdf->GetElement(_param)->GetValueString());

	  if (!_joint)
	    {
	      gzerr << "joint by name ["
		    << _sdf->GetElement(_param)->GetValueString()
		    << "] not found in model\n";
	      return false;
	    }
	}
      return true;
    }

    // Called by the world update start event
  public: void OnUpdate()
    {
      int DesPisz;
      int DesCzytaj;	

      static int Licznik;

      static PID LeftAngleController(5,0.01,0.1);
      static PID RightAngleController(5,0.01,0.1);
      static PID LeftVelController(0.1,0.01,0.01);
      static PID RightVelController(0.1,0.01,0.01);

      //LeftAngleController.SetSP(sin(Licznik/100)*20);
      //RightAngleController.SetSP(sin(Licznik/100)*20);
      LeftAngleController.SetSP(30);
      RightAngleController.SetSP(30);
      double katL=leftWheelJoint->GetAngle(0).Degree();
      double katR=rightWheelJoint->GetAngle(0).Degree();

      LeftVelController.SetSP(-5);
      RightVelController.SetSP(-5);
      double velL=leftWheelJoint->GetVelocity(1);
      double velR=rightWheelJoint->GetVelocity(1);

      

      leftWheelJoint->SetForce(0, LeftAngleController.Control(katL));
      rightWheelJoint->SetForce(0, RightAngleController.Control(katR));	
      leftWheelJoint->SetForce(1, LeftVelController.Control(velL));  
      rightWheelJoint->SetForce(1, RightVelController.Control(velR));
      // this->camera->SaveFrame("/home/bartek/1.jpg");
      //      usleep(2500);
      
      Licznik++;

      //char *pCarrier
	   //if(this->camera->GetImageData())
	    // {
	    //   DesPisz = open("/tmp/FIFO" , O_WRONLY);
	     //  write(DesPisz, this->camera->GetImageData(), 300000); /* wpisuje dane do deskryptowa plku */
	    //   close(DesPisz);			  /* zamykam deskryptor do ktorego wpisalem */
	    //  cout<< "potok: "<<DesPisz<<endl;
	       
	   // }
	     
      //free(BuforDanych);	/* wyczyszczenie buforu */
    }

   // Pointer to the model
    private: physics::ModelPtr model;

    // Pointer to the update event connection
    private: event::ConnectionPtr updateConnection;

    private: physics::JointPtr leftWheelJoint;
    private: physics::JointPtr rightWheelJoint;
    private: sensors::CameraSensorPtr camera;
    // private: double gain;

   // Pointer to the model
  // private: physics::ModelPtr model;

  //   // Pointer to the update event connection
  // private: event::ConnectionPtr updateConnection;

  // private: physics::JointPtr left_wheel_joint_;
  // private: physics::JointPtr right_wheel_joint_;
  };
  class WatekZjebany {
  public: std::mutex mutex;
  private: char value;

  public:
    WatekZjebany() : value(0) {}

    void run(){
      char c;
      while(1){
	c=getch();
	mutex.lock();
        ZMIENNA_GLOBALNA=c;       
	mutex.unlock();
      }
    }
  };
  // Register this plugin with the simulator
  GZ_REGISTER_MODEL_PLUGIN(MobileBasePlugin)
}
